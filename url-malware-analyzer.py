import click
import time
from defang import defang
from defang import refang
from base64 import urlsafe_b64encode
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from virustotal_python import Virustotal

#Testing
#api_key = os.environ.get('VT_API_Key')
#url="www[.]google[.]com"


def get_virustotal_report(api_key, url):
    vtotal = Virustotal(API_KEY=api_key)
    url_id = urlsafe_b64encode(url.encode()).decode().strip("=")
    report = vtotal.request(f"urls/{url_id}").json()
    return report

def display_vt_score_and_category(report):
    last_analysis_stats = report["data"]["attributes"]["last_analysis_stats"]
    malicious = last_analysis_stats["malicious"]
    total_engines = (
        last_analysis_stats["malicious"]
        + last_analysis_stats["suspicious"]
        + last_analysis_stats["harmless"]
        + last_analysis_stats["undetected"]
    )
    vt_score = f"{malicious}/{total_engines}"

    if malicious > 0:
        result_category = "potentially malicious"
    else:
        result_category = "not detected as malicious"

    click.echo(f"VirusTotal Score: {vt_score}")
    click.echo(f"Result Category: {result_category}")


def get_whois_dates(report):
    try:
        whois = report["data"]["attributes"]["whois"]

        creation_date = whois.get("creation_date")
        update_date = whois.get("update_date")

        if creation_date:
            click.echo(f"Creation date: {creation_date}")
        else:
            click.echo("Creation date not found.")

        if update_date:
            click.echo(f"Update date: {update_date}")
        else:
            click.echo("Update date not found.")

    except KeyError:
        click.echo("Error: WHOIS data not found in the report.")


def take_details_screenshot(url, screenshot_file):
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1280,1024")
    driver = webdriver.Chrome(options=chrome_options)

    try:
        driver.get(url)
        time.sleep(5)  # Allow some time for the page to load
        driver.save_screenshot(screenshot_file)
        click.echo(f"Details screenshot saved as: {screenshot_file}")

    except Exception as e:
        click.echo(f"Error taking details screenshot: {e}")

    finally:
        driver.quit()

def take_whois_screenshot(url, whois_screenshot_file):
    chrome_options = Options()
    #chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1280,1024")
    driver = webdriver.Chrome(options=chrome_options)
    url = f"https://www.virustotal.com/gui/domain/{url}/details"
    try:
        driver.get(url)
        time.sleep(5)  # Allow some time for the page to load

        # Click on the WHOIS tab
        whois_tab = driver.find_element(by=webdriver.common.by.By.XPATH, value="//domain-view[@name='domain-view']")
        whois_tab.click()
        time.sleep(3)  # Allow some time for the WHOIS tab to load

        driver.save_screenshot(whois_screenshot_file)
        click.echo(f"WHOIS screenshot saved as: {whois_screenshot_file}")

    except Exception as e:
        click.echo(f"Error taking WHOIS screenshot: {e}")

    finally:
        driver.quit()

def defang_or_refang_url(url):
    """
    Defangs or refangs the given URL depending on whether it is already defanged or not.
    """
    if "[dot]" or "[.]" in url:
        refanged_url = refang(url)
        click.echo(f"refanged URL: {refanged_url}")
        return (refanged_url)
    else:
        defanged_url = defang(url)
        click.echo(f"Defanged URL: {defanged_url}")
        return (defanged_url)

#
# @click.command()
# @click.option("--api_key", required=True, help="Your VirusTotal API key")
# @click.option("--url", required=True, help="The URL to be analyzed")
# @click.option("--details_screenshot", default="details_screenshot.png", help="The file name for the saved details screenshot")
# @click.option("--whois_screenshot", default="whois_screenshot.png", help="The file name for the saved WHOIS screenshot")
def analyze_url(api_key, url, details_screenshot, whois_screenshot):
    """
      Analyzes the given URL using the provided VirusTotal API key and saves a screenshot of the URL's details page and WHOIS tab.
      """
    original_url = url
    url = defang_or_refang_url(url)

    if url != original_url:
        click.echo(f"Defanged URL: {url}")

    report = get_virustotal_report(api_key, url)
    display_vt_score_and_category(report)

    url_id = urlsafe_b64encode(url.encode()).decode().strip("=")
    details_permalink = f"https://www.virustotal.com/gui/url/{url_id}/details"

    get_whois_dates(report)

    take_details_screenshot(details_permalink, details_screenshot)
    take_whois_screenshot(url, whois_screenshot)

if __name__ == '__main__':
    analyze_url()
